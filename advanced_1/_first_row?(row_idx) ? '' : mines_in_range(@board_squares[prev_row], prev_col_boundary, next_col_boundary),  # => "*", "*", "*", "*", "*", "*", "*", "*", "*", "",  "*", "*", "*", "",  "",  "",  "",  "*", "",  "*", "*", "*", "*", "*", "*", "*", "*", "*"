
[1mFrom:[0m /mnt/c/Code/Ruby Challenges/advanced_1/minesweeper.rb:95 Board.calculate_adjacent_mines:

     [1;34m86[0m: [32mdef[0m [1;34mcalculate_adjacent_mines[0m(row, row_idx, col_idx)
     [1;34m87[0m:   [1;34m# prev_col = [col_idx - 1, 0].max  # => 0,          1,          2,          4,          0,          0,          2,          3,          4,          0,          0,          1,          2,          4,          0,          0,          1,          3,          0,          1,          2,          4,          0[0m
     [1;34m88[0m:   [1;34m# next_col = col_idx == @row_boundaries.keys.last ? -1 : col_idx + 1  # => 1,          3,          4,          -1,         1,          2,          4,          5,          -1,         1,          2,          3,          4,          -1,         1,          2,          3,          5,          1,          3,          4,          -1,         1[0m
     [1;34m89[0m:   [1;34m# @width  # => 6,          6,          6,          6,          6,          6,          6,          6,          6,          6,          6,          6,          6,          6,          6,          6,          6,          6,          6,          6,          6,          6,          6[0m
     [1;34m90[0m:   [1;34m# row_idx + 1  # => 1,          1,          1,          1,          2,          2,          2,          2,          2,          3,          3,          3,          3,          3,          4,          4,          4,          4,          5,          5,          5,          5,          6[0m
     [1;34m91[0m:   prev_col_boundary = restrict_to_board_boundaries(col_idx - [1;34m1[0m, [33m:col[0m)  [1;34m# => 0,          1,          2,          4,          0,          0,          2,          3,          4,          0,          0,          1,          2,          4,          0,          0,          1,          3,          0,          1,          2,          4,          0,          0,          1,          2,          3,          4[0m
     [1;34m92[0m:   next_col_boundary = restrict_to_board_boundaries(col_idx + [1;34m1[0m, [33m:col[0m)  [1;34m# => 1,          3,          4,          5,          1,          2,          4,          5,          5,          1,          2,          3,          4,          5,          1,          2,          3,          5,          1,          3,          4,          5,          1,          2,          3,          4,          5,          5[0m
     [1;34m93[0m:   prev_square, next_square = row[prev_col_boundary], row[next_col_boundary]  [1;34m# => [" ", "*"], ["*", " "], [" ", "*"], ["*", " "], [" ", " "], [" ", "*"], ["*", " "], [" ", " "], [" ", " "], [" ", " "], [" ", " "], [" ", " "], [" ", "*"], ["*", " "], [" ", " "], [" ", " "], [" ", "*"], ["*", "*"], [" ", "*"], ["*", " "], [" ", "*"], ["*", " "], [" ", " "], [" ", " "], [" ", " "], [" ", " "], [" ", " "], [" ", " "][0m
     [1;34m94[0m:   prev_row, next_row = restrict_to_board_boundaries(row_idx - [1;34m1[0m, [33m:row[0m), restrict_to_board_boundaries(row_idx + [1;34m1[0m, [33m:row[0m)
 =>  [1;34m95[0m:   binding.pry
     [1;34m96[0m:       [
     [1;34m97[0m:         is_first_row?(row_idx) ? [31m[1;31m'[0m[31m[1;31m'[0m[31m[0m : mines_in_range(@board_squares[prev_row], prev_col_boundary, next_col_boundary),  [1;34m# => "*", "*", "*", "*", "*", "*", "*", "*", "*", "",  "*", "*", "*", "",  "",  "",  "",  "*", "",  "*", "*", "*", "*", "*", "*", "*", "*", "*"[0m
     [1;34m98[0m:         is_last_row?(row_idx) ? [31m[1;31m'[0m[31m[1;31m'[0m[31m[0m : mines_in_range(@board_squares[next_row], prev_col_boundary, next_col_boundary),  [1;34m# => "",  "*", "*", "",  "",  "",  "*", "*", "*", "",  "",  "*", "*", "*", "*", "*", "*", "*", "",  "",  "",  "",  "",  "",  "",  "",  "",  ""[0m
     [1;34m99[0m:         prev_square,  [1;34m# => " ", "*", " ", "*", " ", " ", "*", " ", " ", " ", " ", " ", " ", "*", " ", " ", " ", "*", " ", "*", " ", "*", " ", " ", " ", " ", " ", " "[0m
    [1;34m100[0m:         next_square  [1;34m# => "*", " ", "*", " ", " ", "*", " ", " ", " ", " ", " ", " ", "*", " ", " ", " ", "*", "*", "*", " ", "*", " ", " ", " ", " ", " ", " ", " "[0m
    [1;34m101[0m:       ].join.count([31m[1;31m'[0m[31m*[1;31m'[0m[31m[0m)  [1;34m# => 2,   3,   3,   2,   1,   2,   3,   2,   2,   0,   1,   2,   3,   2,   1,   1,   2,   4,   1,   2,   2,   2,   1,   1,   1,   1,   1,   1[0m
    [1;34m102[0m: [32mend[0m  [1;34m# => :calculate_adjacent_mines[0m

